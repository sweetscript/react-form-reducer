{"version":3,"file":"index.modern.js","sources":["../src/hooks/useFormErrors.ts","../src/hooks/useForm.ts","../src/contexts/FormContext.tsx","../src/hooks/useFormContext.ts"],"sourcesContent":["import { useState } from 'react';\nimport { Errors, FormErrorsProps } from '../types';\n\n/**\n * This hook can be used to easily handle returned validation errors\n */\nconst useFormErrors = (): FormErrorsProps => {\n  const [errors, setErrors] = useState<Errors>({});\n  const instance = {\n    errors: errors,\n\n    /**\n     * Determine if there are any error messages for the field\n     * @param field\n     */\n    has: (field: string) => {\n      return errors && !!Object.getOwnPropertyDescriptor(errors, field);\n    },\n\n    /**\n     * Determine if form has any errors\n     */\n    hasErrors: () => {\n      return Object.keys(errors).length > 0;\n    }\n  } as FormErrorsProps;\n\n  /**\n   * Returns an array of error messages for a field, or an empty array\n   * @param field\n   */\n  instance.get = (field: string) => {\n    return instance.has(field) ? errors[field] : [];\n  };\n  /**\n   * Returns the first error message for a field, false otherwise\n   */\n  instance.first = (field: string) => {\n    return instance.has(field) ? errors?.[field]?.[0] : false;\n  };\n\n  /**\n   * Get all error messages\n   */\n  instance.all = () => {\n    return errors;\n  };\n\n  //SETTERS\n  /**\n   * Add new error message for given field\n   * @param field\n   * @param message\n   */\n  instance.add = (field: string, message: string) => {\n    const newErrors: Errors = { ...errors };\n    if (!instance.has(field)) {\n      newErrors[field] = [];\n    }\n\n    if (newErrors[field].indexOf(message) === -1) {\n      newErrors[field].push(message);\n    }\n    setErrors(newErrors);\n  };\n\n  /**\n   * Set error messages\n   */\n  instance.set = (errors: Errors) => {\n    setErrors(errors);\n  };\n\n  /**\n   * Forget all the errors\n   */\n  instance.forget = (field?: string) => {\n    if (!field) {\n      if (instance.hasErrors()) setErrors({});\n    } else if (errors[field]) {\n      const res = { ...errors };\n      delete res[field];\n      setErrors(res);\n    }\n  };\n\n  return instance;\n};\n\nexport default useFormErrors;\n","import { ChangeEventHandler, useReducer, useState } from 'react';\nimport useFormErrors from './useFormErrors';\nimport { FormHookType, UseFormOptions } from '../types';\nimport Validator, { Rules } from 'validatorjs';\n\n/**\n * This is the form state hook\n * @param defaultValues\n * @param options\n */\nexport default function useForm<T>(\n  defaultValues: T,\n  options?: UseFormOptions<T>\n): FormHookType<T> {\n  const formErrors = useFormErrors();\n\n  const [isDirty, setIsDirty] = useState<boolean>(false);\n  const [isBusy, setIsBusy] = useState<boolean>(false);\n  const [step, setStep] = useState<number>(1);\n\n  const { onUpdateFields } = options || {};\n\n  // Fields state\n  const [fields, updateFields] = useReducer((prev: T, next: Partial<T>) => {\n    let newFields = { ...prev, ...next };\n    if (onUpdateFields) {\n      newFields = onUpdateFields(newFields);\n    }\n    return newFields;\n  }, defaultValues);\n\n  // Fields state setters\n  const setFields = (values: Partial<T>, setDirty = true) => {\n    if (onUpdateFields) {\n      values = onUpdateFields(values as T);\n    }\n    updateFields(values);\n    setIsDirty(setDirty);\n  };\n  const setField = (name: keyof T, value: unknown) => {\n    const v: { [key: string]: unknown } = {};\n    v[name as string] = value;\n    setFields(v as Partial<T>, true);\n\n    //Clear field error if present\n    formErrors.forget(name as string);\n  };\n  const handleInputChange =\n    (\n      name: keyof T\n    ): ChangeEventHandler<\n      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement\n    > =>\n    (event) => {\n      const target = event.currentTarget || event.target;\n      const targetType = target.getAttribute('type') || 'text';\n      if (['checkbox', 'radio'].indexOf(targetType) !== -1) {\n        setField(name, target instanceof HTMLInputElement && target.checked);\n      } else if (['number', 'range'].indexOf(targetType) !== -1) {\n        setField(name, Number(target.value));\n      } else {\n        setField(name, target.value);\n      }\n    };\n  const reset = () => {\n    setFields(defaultValues, false);\n  };\n\n  // Validation logic\n  function validate(fieldsToCheck?: Array<keyof T>) {\n    let rules: { [key: string]: unknown } = options?.validationRules || {};\n    let validateFields: { [key: string]: unknown } = fields;\n    if (fieldsToCheck) {\n      validateFields = {};\n      const fieldRules: { [key: string]: unknown } = {};\n      for (const fieldKey in fields) {\n        if (fieldsToCheck.indexOf(fieldKey) !== -1) {\n          validateFields[fieldKey] = fields[fieldKey];\n          if (rules[fieldKey]) {\n            fieldRules[fieldKey] = rules[fieldKey];\n          }\n        }\n      }\n      rules = fieldRules;\n    }\n    const validation = new Validator(\n      validateFields,\n      rules as Rules,\n      options?.validationMessages\n    );\n    const pass = validation.passes();\n    if (pass) return true;\n    const errors = validation.errors.all();\n    formErrors.set(errors);\n    return false;\n  }\n\n  return {\n    fields,\n    setFields,\n    setField,\n    handleInputChange,\n    reset,\n    errors: formErrors,\n    isDirty,\n    setIsDirty,\n    isBusy,\n    setIsBusy,\n    step,\n    setStep,\n    validate\n  };\n}\n","import React, { Context, createContext, ReactNode } from 'react';\nimport { FormContextType, UseFormOptions } from '../types';\nimport useForm from '../hooks/useForm';\n\nconst _FormContext = createContext<object>({});\n\nexport function FormContext<T>(): Context<FormContextType<T>> {\n  return _FormContext as Context<FormContextType<T>>;\n}\n\nexport function FormContextProvider<T>({\n  children,\n  defaultValues,\n  options\n}: {\n  children: ReactNode;\n  defaultValues: T;\n  options?: UseFormOptions<T>;\n}) {\n  const formInstance = useForm<T>(defaultValues, options);\n\n  const Context = FormContext<T>();\n\n  return <Context.Provider value={formInstance}>{children}</Context.Provider>;\n}\n","import { useContext } from 'react';\nimport { FormContext } from '../contexts/FormContext';\nimport { FormContextType } from '../types';\n\n/**\n * This hook can be used to easily share form state between child components, useful for stepped forms\n */\nexport default function useFormContext<T>() {\n  return useContext<FormContextType<T>>(FormContext<T>()) as FormContextType<T>;\n}\n"],"names":["useFormErrors","errors","setErrors","useState","instance","has","field","Object","getOwnPropertyDescriptor","hasErrors","keys","length","_errors$field","message","newErrors","_extends","indexOf","push","res","useForm","defaultValues","options","formErrors","isDirty","setIsDirty","isBusy","setIsBusy","step","setStep","onUpdateFields","fields","updateFields","useReducer","prev","next","newFields","setFields","values","setDirty","setField","name","value","v","forget","handleInputChange","event","target","currentTarget","targetType","getAttribute","HTMLInputElement","checked","Number","reset","validate","fieldsToCheck","rules","validationRules","validateFields","fieldRules","fieldKey","validation","Validator","validationMessages","passes","all","set","_FormContext","createContext","FormContext","FormContextProvider","children","React","createElement","Context","Provider","formInstance","useFormContext"],"mappings":"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"}