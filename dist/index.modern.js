import e,{useState as t,useReducer as r,createContext as n,useContext as s}from"react";function o(){return o=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},o.apply(this,arguments)}const a=()=>{const[e,r]=t({}),n={errors:e,has:t=>e&&!!Object.getOwnPropertyDescriptor(e,t),hasErrors:()=>Object.keys(e).length>0,get:t=>n.has(t)?e[t]:[],first:t=>{var r;return!!n.has(t)&&(null==e||null==(r=e[t])?void 0:r[0])},all:()=>e,add:(t,s)=>{const a=o({},e);n.has(t)||(a[t]=[]),-1===a[t].indexOf(s)&&a[t].push(s),r(a)},set:e=>{r(e)},forget:t=>{if(t){if(e[t]){const n=o({},e);delete n[t],r(n)}}else n.hasErrors()&&r({})}};return n};function i(e,n){const s=a(),[i,c]=t(!1),[l,u]=t(!1),[d,f]=t(1),{onUpdateFields:p}=n||{},[h,v]=r((e,t)=>{let r=o({},e,t);return p&&(r=p(r)),r},e),g=(e,t=!0)=>{p&&(e=p(e)),v(e),c(t)},y=(e,t)=>{const r={};r[e]=t,g(r,!0),s.forget(e)};return{fields:h,setFields:g,setField:y,handleInputChange:e=>t=>{const r=t.currentTarget||t.target,n=r.getAttribute("type")||"text";-1!==["checkbox","radio"].indexOf(n)?y(e,r instanceof HTMLInputElement&&r.checked):-1!==["number","range"].indexOf(n)?y(e,Number(r.value)):y(e,r.value)},reset:()=>{g(e,!1)},errors:s,isDirty:i,setIsDirty:c,isBusy:l,setIsBusy:u,step:d,setStep:f,validate:async e=>{const t=null==n?void 0:n.validation;if(!t)throw new Error("No validator resolver passed");const r=t.validate(h,e);return 1==r?{passed:!0}:(s.set(r),{passed:!1,error:r})}}}const c=/*#__PURE__*/n({});function l(){return c}function u({children:t,defaultValues:r,options:n}){const s=i(r,n),o=l();/*#__PURE__*/return e.createElement(o.Provider,{value:s},t)}function d(){return s(l())}class f{}export{l as FormContext,u as FormContextProvider,f as ValidationResolver,i as useForm,d as useFormContext,a as useFormErrors};
