{"version":3,"file":"index.umd.js","sources":["../src/hooks/useFormErrors.ts","../src/hooks/useForm.ts","../src/contexts/FormContext.tsx","../src/hooks/useFormContext.ts"],"sourcesContent":["import { useState } from 'react';\nimport { Errors, FormErrorsProps } from '../types';\n\n/**\n * This hook can be used to easily handle returned validation errors\n */\nconst useFormErrors = (): FormErrorsProps => {\n  const [errors, setErrors] = useState<Errors>({});\n  const instance = {\n    errors: errors,\n\n    /**\n     * Determine if there are any error messages for the field\n     * @param field\n     */\n    has: (field: string) => {\n      return errors && !!Object.getOwnPropertyDescriptor(errors, field);\n    },\n\n    /**\n     * Determine if form has any errors\n     */\n    hasErrors: () => {\n      return Object.keys(errors).length > 0;\n    }\n  } as FormErrorsProps;\n\n  /**\n   * Returns an array of error messages for a field, or an empty array\n   * @param field\n   */\n  instance.get = (field: string) => {\n    return instance.has(field) ? errors[field] : [];\n  };\n  /**\n   * Returns the first error message for a field, false otherwise\n   */\n  instance.first = (field: string) => {\n    return instance.has(field) ? errors?.[field]?.[0] : false;\n  };\n\n  /**\n   * Get all error messages\n   */\n  instance.all = () => {\n    return errors;\n  };\n\n  //SETTERS\n  /**\n   * Add new error message for given field\n   * @param field\n   * @param message\n   */\n  instance.add = (field: string, message: string) => {\n    const newErrors: Errors = { ...errors };\n    if (!instance.has(field)) {\n      newErrors[field] = [];\n    }\n\n    if (newErrors[field].indexOf(message) === -1) {\n      newErrors[field].push(message);\n    }\n    setErrors(newErrors);\n  };\n\n  /**\n   * Set error messages\n   */\n  instance.set = (errors: Errors) => {\n    setErrors(errors);\n  };\n\n  /**\n   * Forget all the errors\n   */\n  instance.forget = (field?: string) => {\n    if (!field) {\n      if (instance.hasErrors()) setErrors({});\n    } else if (errors[field]) {\n      const res = { ...errors };\n      delete res[field];\n      setErrors(res);\n    }\n  };\n\n  return instance;\n};\n\nexport default useFormErrors;\n","import { ChangeEventHandler, useReducer, useState } from 'react';\nimport useFormErrors from './useFormErrors';\nimport { FormHookType, UseFormOptions } from '../types';\n\n/**\n * This is the form state hook\n * @param defaultValues\n * @param options\n */\nexport default function useForm<T>(\n  defaultValues: T,\n  options?: UseFormOptions<T>\n): FormHookType<T> {\n  const errors = useFormErrors();\n\n  const [isDirty, setIsDirty] = useState<boolean>(false);\n  const [isBusy, setIsBusy] = useState<boolean>(false);\n  const [step, setStep] = useState<number>(1);\n\n  const { onUpdateFields } = options || {};\n\n  // Fields state\n  const [fields, updateFields] = useReducer((prev: T, next: Partial<T>) => {\n    let newFields = { ...prev, ...next };\n    if (onUpdateFields) {\n      newFields = onUpdateFields(newFields);\n    }\n    return newFields;\n  }, defaultValues);\n\n  // Fields state setters\n  const setFields = (values: Partial<T>, setDirty = true) => {\n    if (onUpdateFields) {\n      values = onUpdateFields(values as T);\n    }\n    updateFields(values);\n    setIsDirty(setDirty);\n  };\n  const setField = (name: keyof T, value: unknown) => {\n    const v: { [key: string]: unknown } = {};\n    v[name as string] = value;\n    setFields(v as Partial<T>, true);\n  };\n  const handleInputChange =\n    (\n      name: keyof T\n    ): ChangeEventHandler<\n      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement\n    > =>\n    (event) => {\n      const target = event.currentTarget || event.target;\n      const targetType = target.getAttribute('type') || 'text';\n      if (['checkbox', 'radio'].indexOf(targetType) !== -1) {\n        setField(name, target instanceof HTMLInputElement && target.checked);\n      } else {\n        setField(name, target.value);\n      }\n    };\n  const reset = () => {\n    setFields(defaultValues, false);\n  };\n\n  return {\n    fields,\n    setFields,\n    setField,\n    handleInputChange,\n    reset,\n    errors,\n    isDirty,\n    setIsDirty,\n    isBusy,\n    setIsBusy,\n    step,\n    setStep\n  };\n}\n","import React, { Context, createContext, ReactNode } from 'react';\nimport { FormContextType, UseFormOptions } from '../types';\nimport useForm from '../hooks/useForm';\n\nconst _FormContext = createContext<object>({});\n\nexport function FormContext<T>(): Context<FormContextType<T>> {\n  return _FormContext as Context<FormContextType<T>>;\n}\n\nexport function FormContextProvider<T>({\n  children,\n  defaultValues,\n  options\n}: {\n  children: ReactNode;\n  defaultValues: T;\n  options?: UseFormOptions<T>;\n}) {\n  const formInstance = useForm<T>(defaultValues, options);\n\n  const Context = FormContext<T>();\n\n  return <Context.Provider value={formInstance}>{children}</Context.Provider>;\n}\n","import { useContext } from 'react';\nimport { FormContext } from '../contexts/FormContext';\nimport { FormContextType } from '../types';\n\n/**\n * This hook can be used to easily share form state between child components, useful for stepped forms\n */\nexport default function useFormContext<T>() {\n  return useContext<FormContextType<T>>(FormContext<T>()) as FormContextType<T>;\n}\n"],"names":["useFormErrors","_useState","useState","errors","setErrors","instance","has","field","Object","getOwnPropertyDescriptor","hasErrors","keys","length","_errors$field","message","newErrors","_extends","indexOf","push","res","useForm","defaultValues","options","isDirty","setIsDirty","isBusy","setIsBusy","step","setStep","onUpdateFields","useReducer","prev","next","newFields","updateFields","_useReducer","setFields","values","setDirty","name","value","v","fields","setField","handleInputChange","event","target","currentTarget","getAttribute","targetType","HTMLInputElement","checked","reset","_FormContext","createContext","FormContext","_ref","children","formInstance","Context","React","createElement","Provider","useFormContext"],"mappings":"ilBAMMA,IAAAA,EAAgB,WACpB,IAAAC,EAA4BC,EAAQA,SAAS,CAAE,GAAxCC,EAAQC,EAAAA,GAAAA,EACfH,EAAA,GAAcI,EAAG,CACfF,OAAQA,EAMRG,IAAK,SAACC,GACJ,OAAOJ,KAAYK,OAAOC,yBAAyBN,EAAQI,EAC7D,EAKAG,UAAW,WACT,OAAOF,OAAOG,KAAKR,GAAQS,OAAS,CACtC,EAOFP,IAAe,SAACE,GACd,OAAeF,EAACC,IAAIC,GAASJ,EAAOI,GAAS,EAC/C,EAIAF,MAAiB,SAACE,GAChB,IAAAM,EAAA,QAAeR,EAACC,IAAIC,KAASJ,MAAAA,GAAA,OAAAA,EAAAA,EAASI,SAATJ,EAAAU,EAAkB,GACjD,EAKAR,IAAe,WACb,OAAOF,CACT,EAQAE,IAAe,SAACE,EAAeO,GAC7B,IAAeC,EAAAC,EAAA,CAAA,EAAgBb,GAC1BE,EAASC,IAAIC,KAChBQ,EAAUR,GAAS,KAGsB,IAAvCQ,EAAUR,GAAOU,QAAQH,IAC3BC,EAAUR,GAAOW,KAAKJ,GAExBV,EAAUW,EACZ,EAKAV,IAAe,SAACF,GACdC,EAAUD,EACZ,EAKAE,OAAkB,SAACE,GACjB,GAAKA,GAEE,GAAIJ,EAAOI,GAAQ,CACxB,IAAMY,EAAWhB,EAAAA,CAAAA,EAAAA,UACPgB,EAACZ,GACXH,EAAUe,EACX,OALKd,EAASK,aAAaN,EAAU,CAAA,EAMxC,GAEA,OAAOC,CACT,EC9Ec,SAAiBe,EAC7BC,EACAC,GAEA,IAAYnB,EAAGH,IAEeE,EAAAA,EAAQA,UAAU,GAAzCqB,EAASC,EAAAA,GAAAA,OACYtB,EAAAA,YAAkB,GAAvCuB,EAAQC,EAAAA,GAAAA,OACSxB,EAAAA,EAAAA,SAAiB,GAAlCyB,EAAMC,EAAAA,GAAAA,OAELC,GAAmBP,GAAW,IAA9BO,eAGuBC,EAAAA,aAAW,SAACC,EAASC,GAClD,IAAaC,EAAAjB,EAAA,CAAA,EAAQe,EAASC,GAI9B,OAHIH,IACFI,EAAYJ,EAAeI,KAG/B,EAAGZ,GANYa,EAAYC,EAAA,GASZC,EAAG,SAACC,EAAoBC,QAAQ,IAARA,IAAAA,GAAW,GAC5CT,IACFQ,EAASR,EAAeQ,IAE1BH,EAAaG,GACbb,EAAWc,EACb,IACiB,SAACC,EAAeC,GAC/B,IAAOC,EAA+B,CAAA,EACtCA,EAAEF,GAAkBC,EACpBJ,EAAUK,GAAiB,EAC7B,EAoBA,MAAO,CACLC,OAzCWP,EAAA,GA0CXC,UAAAA,EACAO,SAAAA,EACAC,kBAtBA,SACEL,GAIF,OAAA,SAACM,GACC,IAAMC,EAASD,EAAME,eAAiBF,EAAMC,SACzBA,EAAOE,aAAa,SAAW,QACC,IAA/C,CAAC,WAAY,SAAS/B,QAAQgC,GAChCN,EAASJ,EAAMO,aAAkCI,kBAAIJ,EAAOK,SAE5DR,EAASJ,EAAMO,EAAON,MAE1B,CAAC,EAUDY,MATY,WACZhB,EAAUf,GAAe,EAC3B,EAQElB,OAAAA,EACAoB,QAAAA,EACAC,WAAAA,EACAC,OAAAA,EACAC,UAAAA,EACAC,KAAAA,EACAC,QAAAA,EAEJ,CCxEA,IAAMyB,eAAeC,EAAaA,cAAS,IAE3BC,SAAAA,IACd,OACFF,CAAA,uCAEM,SAQLG,GAAA,IAPSC,EAAAD,EAARC,SAQkBC,EAAGtC,EAPrBC,EAAAA,cACOmC,EAAPlC,SAQaqC,EAAGJ,iBAEhB,OAAOK,EAAA,QAAAC,cAACF,EAAQG,SAAQ,CAACtB,MAAOkB,GAAeD,EACjD,+BCjBwBM,WACtB,oBAAsCR,IACxC"}